import logging
import re
from sqlalchemy.exc import IntegrityError
import db_manager as dbm
import configparser
import random
import telebot
from telebot import types, TeleBot, State
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from psycopg2.errors import  UniqueViolation
from models import (RussianWord, EnglishWord, RussianEnglishAssociation,
                    LearnedWord, User)

logging.basicConfig(level = logging.INFO)
logger = logging.getLogger(__name__)

config = configparser.ConfigParser()
config.read('settings.ini')
TOKEN = config['Tokens']['TOKEN']

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(TOKEN, state_storage = state_storage)

engine = dbm.create_engine()
session = dbm.create_session(engine)

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ'
    NEXT_WORD = '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚è©'
    BACK = '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è'
    END = '–ó–∞–∫–æ–Ω—á–∏—Ç—å —É—Ä–æ–∫ ‚ùå'

class Labels:
    START_LABEL = '–ù–∞—á–∏–Ω–∞–µ–º!üÜï\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:'
    NEXT_ACTION = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    CORRECT_PHRASES = [
        '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä!',
        '–ú–æ–ª–æ–¥–µ—Ü! –í–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥!',
        '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!',
        '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!'
    ]
    INCORRECT_PHRASES = [
        '–£–ø—Å! –≠—Ç–æ –Ω–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.',
        '–ú–∏–º–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.',
        '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.',
        '–ù–µ –≤–µ—Ä–Ω–æ, –Ω–æ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!'
    ]
class Stickers:
    CORRECT_STICKERS = [
        'CAACAgIAAxkBAAOHZ5k4onMUtuHVOYBD3UiLkbCSHn8AAiQBAALjUDAAASluN3-18mMfNgQ',
        'CAACAgIAAxkBAAOJZ5k4t99ri2kwD_qKHBup-dA80r8AAv8BAALjUDAAAbVxFB9Px_LeNgQ',
        'CAACAgIAAxkBAAOXZ5k5PEUz2R2lY-R9QmhA48JF5UEAAoAAA-NQMAABK6GZtBHF6Lk2BA',
        'CAACAgIAAxkBAAOfZ5k5lTkt3d1ZoUHtHVCP_t9DVhAAAqgAA-NQMAABw2dpf7fTyyI2BA',
        'CAACAgIAAxkBAAOZZ5k5Yu6SqMKH5BVHhJHwO66J6BoAAooAA-NQMAABpkmqNqEkawY2BA',
        'CAACAgIAAxkBAAOVZ5k5IgYQPubxU0bbaNVPt4wZ7JMAAq4AA-NQMAABDSgLIWw_6EM2BA'
    ]

    INCORRECT_STICKERS = [
        'CAACAgIAAxkBAAODZ5k4hYw4hcN_mZoX5W_juUhmLR4AAqAAA-NQMAAB0QmXSwAB_JB9NgQ',
        'CAACAgIAAxkBAAOFZ5k4nK89SqYIKLJJUVwn7w0J_bEAAv4BAALjUDAAAZ_RW1koLZOGNgQ',
        'CAACAgIAAxkBAAOLZ5k40dwD52m58T9TpJotw7NBL0wAAoQAA-NQMAAB8kVi1X7e_EU2BA',
        'CAACAgIAAxkBAAONZ5k41KgHCPM4RFiQOuhvseKtHXMAAiYBAALjUDAAAZOQPN3l-K2NNgQ',
        'CAACAgIAAxkBAAORZ5k482VmBf6Ek0bwCeF1uCKwJjgAAogAA-NQMAAB_e0dxxhg7Sw2BA',
        'CAACAgIAAxkBAAOTZ5k49x1XvKVZ-nw594SG6rcWPX0AAowAA-NQMAABKw9NhY2lc7M2BA',
        'CAACAgIAAxkBAAObZ5k5eQfTo1qvYDAeGxpjY-Z-F0EAAoYAA-NQMAABwC775648wRs2BA',
        'CAACAgIAAxkBAAOdZ5k5h3WQGXVcARMKMHuA9C0uvMAAAqIAA-NQMAABwkLo4ETW2wo2BA'
    ]
class SessionDataSet():
    current_word = ''
    target_word = ''
    other_words = []
    used_words = []
    translate_direction = ''
    learned_ru_word_id = None
    learned_en_word_id = None
    dict_type = ''
    correct_answers = []
    current_word_attempts = 0


class AddWordStates(StatesGroup):
    russian_added_word = State()
    english_added_word = State()

class DeleteWordStates(StatesGroup):
    deleted_word = State()


def get_start_menu():
    markup = types.InlineKeyboardMarkup(row_width = 2)
    en_ru_btn = types.InlineKeyboardButton('EN ‚û°Ô∏è RU', callback_data =
    'en_ru_direction')
    ru_en_btn = types.InlineKeyboardButton('RU ‚û°Ô∏è EN', callback_data =
    'ru_en_direction')
    return markup.add(en_ru_btn, ru_en_btn)

def get_select_dict_menu():
    markup = types.InlineKeyboardMarkup(row_width = 3)
    base_dict = types.InlineKeyboardButton('–í—Å–µ —Å–ª–æ–≤–∞ üìö',
                                           callback_data = 'all_words')
    user_dict = types.InlineKeyboardButton('–ú–æ–∏ —Å–ª–æ–≤–∞ üìñ',
                                           callback_data = 'my_words')
    backstate_btn = types.InlineKeyboardButton(Command.BACK,
                                         callback_data = 'go_back_direction')
    return markup.add(base_dict, user_dict, backstate_btn)

def get_translation_menu():
    markup = types.ReplyKeyboardMarkup(row_width = 2)
    target_word_btn = types.KeyboardButton(SessionDataSet.target_word)
    other_word_btns = [types.KeyboardButton(word) for word in
                       SessionDataSet.other_words]
    buttons = [target_word_btn] + other_word_btns
    random.shuffle(buttons)
    next_word_btn = types.KeyboardButton(Command.NEXT_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    close_btn = types.InlineKeyboardButton(Command.END)
    buttons.extend([add_word_btn, delete_word_btn, next_word_btn, close_btn])
    return markup.add(*buttons)

def create_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton('–î–∞', callback_data = 'confirm'),
              InlineKeyboardButton('–ù–µ—Ç', callback_data = 'cancel')
    )
    return keyboard

def create_saving_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data = 'save'),
              InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å', callback_data = 'cancel_save')
    )
    return keyboard

def is_russian(text):
    return bool(re.match('^[–∞-—è–ê-–Ø—ë–Å]+$', text))

def is_english(text):
    return bool(re.match('^[a-zA-Z]+$', text))

@bot.message_handler(commands = ['start'])
def start_command(message):
    bot.send_message(message.chat.id, Labels.START_LABEL,
                     reply_markup = get_start_menu())
    user_name = message.from_user.id
    dbm.download_data_from_json(session = session,
                                path='files/base_dict.json',
                                user_name = user_name)

@bot.callback_query_handler(func = lambda call:True)
def callback_all_commands(call):
    if not call.message:
        return
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    user_id = call.from_user.id
    if call.data in ['en_ru_direction', 'ru_en_direction']:
        SessionDataSet.translate_direction = call.data
        direction = 'EN ‚û°Ô∏è RU' if call.data == 'en_ru_direction' else 'RU ‚û°Ô∏è EN'
        text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {direction} –ø–µ—Ä–µ–≤–æ–¥.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:'
        bot.edit_message_text(chat_id = chat_id, message_id = message_id,
                              text = text,
                              reply_markup = get_select_dict_menu())
    elif call.data == 'go_back_direction':
        bot.edit_message_text(chat_id = chat_id, message_id = message_id,
                              text = Labels.START_LABEL,
                              reply_markup = get_start_menu())
    elif call.data in ['all_words', 'my_words']:
        SessionDataSet.dict_type = call.data
        word_list = dbm.get_word_for_study(call.data,
                                           SessionDataSet.translate_direction,
                                           user_id, session)
        if len([word for word in word_list if word]) < 5:
            notification = ('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                            '–¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.')
            bot.answer_callback_query(call.id, text = notification,
                                      show_alert = True)
            return
        (SessionDataSet.current_word, SessionDataSet.target_word,
         *SessionDataSet.other_words) = word_list
        SessionDataSet.used_words.append(SessionDataSet.current_word)
        is_en_ru = SessionDataSet.translate_direction == 'en_ru_direction'
        header_text = (f'{'Translate word:' if is_en_ru else '–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ'} :\n'
                       f'üëâ{SessionDataSet.current_word}üëà')
        task_text = f'{'Choose a translation option' if is_en_ru else 
                       '–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞'}:'
        bot.edit_message_text(chat_id = chat_id, message_id = message_id,
                              text = header_text)
        bot.send_message(chat_id, text = task_text,
                         reply_markup = get_translation_menu())

    if call.data == 'confirm':
        success, message_text = reset_users_progress(call.from_user.id,
                                                     session)
        bot.answer_callback_query(call.id, text = message_text)
        bot.edit_message_text(
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            text = message_text
        )
        if success:
            bot.send_message(call.message.chat.id,
                             text = Labels.NEXT_ACTION,
                             reply_markup = get_translation_menu())
    elif call.data == 'cancel':
        bot.answer_callback_query(call.id,
                                  text = '–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω!')
        bot.edit_message_text(
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            text = '–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.'
        )
        bot.send_message(call.message.chat.id,
                         text = Labels.NEXT_ACTION,
                         reply_markup = get_translation_menu())
    if call.data == 'save':
        message_text = (f'–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏–∑—É—á–µ–Ω–Ω—ã—Ö!\n'
                        f'{Labels.NEXT_ACTION}')
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            text = '–í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ!'
        )
        user_id = dbm.get_user_id(session, call.from_user.id)
        new_learned_word = dbm.mark_word_as_learned(
            russian_word_id=SessionDataSet.learned_ru_word_id,
            english_word_id=SessionDataSet.learned_en_word_id,
            user_id = user_id ,
            session = session)
        if new_learned_word:
            bot.send_message(call.message.chat.id,
                             message_text,
                             reply_markup = get_translation_menu())
        else:
            bot.send_message(call.message.chat.id,
                             '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!',
                             reply_markup = get_translation_menu())
    elif call.data == 'cancel_save':
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!')
        bot.send_message(call.message.chat.id,
                         text = Labels.NEXT_ACTION,
                         reply_markup = get_translation_menu())

    if call.data == 'new_lesson':
        bot.edit_message_text(chat_id = chat_id, message_id = message_id,
                              text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è '
                                     '–Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:',
                              reply_markup = get_start_menu())
    elif call.data == 'exit':
        bot.edit_message_text(chat_id = chat_id, message_id = message_id,
                              text = '–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!')

    bot.answer_callback_query(call.id)

@bot.message_handler(func = lambda message: message.text == Command.ADD_WORD)
def handle_add_word(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ:',
                     reply_markup = ReplyKeyboardRemove())
    bot.register_next_step_handler(message, handle_russian_word)

def handle_russian_word(message):
    russian_word = message.text.lower()
    bot.set_state(message.from_user.id,
                  AddWordStates.russian_added_word,
                  message.chat.id
                  )
    # logger.info(f'Received message: {message.text}')
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['russian_word'] = russian_word
        # logger.info(f'Current state data: {data}')
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π '
                                      '—Ä—É—Å—Å–∫–æ–º—É —Å–ª–æ–≤—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:')
    bot.set_state(message.from_user.id, AddWordStates.english_added_word,
                  message.chat.id)
    bot.register_next_step_handler(message, handle_english_word)
    # logger.info(f'User {message.from_user.id} entered Russian word: '
    #             f'{russian_word}. Waiting for English translation.')

def handle_english_word(message):
    english_word = message.text.lower()
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        russian_word = data['russian_word']
    # logger.info(f'User {message.from_user.id} entered English word: '
    #             f'{english_word}. Waiting for storing words in DB.')
    if dbm.create_user(message.from_user.id, session):
        try:
            ru_word = RussianWord(ru_word = russian_word)
            en_word = EnglishWord(en_word = english_word)
            session.add_all([ru_word, en_word])
            session.flush()
            # logger.info(f'Created association: {word_association}')
            user_id = session.query(User.id).filter(
                User.username == message.from_user.id).first()[0]
            # user_association = RuWordUserAssociation(russian_word_id = ru_word.id,
            #                                          user_id = user_id)
            # # logger.info(f'Created association: {user_association}')
            word_association = RussianEnglishAssociation(
                            russian_word_id = ru_word.id,
                            english_word_id = en_word.id,
                            user_id = user_id,
                        )
            session.add(word_association)
            session.commit()
            bot.send_message(message.chat.id,
                             f'–ü–∞—Ä–∞ —Å–ª–æ–≤ {russian_word} - {english_word} '
                             f'—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.')
        except IntegrityError as e:
            session.rollback()
            if isinstance(e.orig, UniqueViolation):

                bot.send_message(message.chat.id,
                             f'–ü–∞—Ä–∞ —Å–ª–æ–≤ {russian_word} - {english_word} '
                             f'—É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ!')
            else:
                bot.send_message(message.chat.id,
                            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å!')
        finally:
            bot.delete_state(message.from_user.id, message.chat.id)
            bot.send_message(message.chat.id, text = Labels.NEXT_ACTION,
                             reply_markup = get_translation_menu())
    else:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ '
                         '–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!',
                         reply_markup = get_translation_menu())

@bot.message_handler(func = lambda message:
                     message.text == Command.DELETE_WORD)
def handle_delete_word(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è '
                              '(–Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):',
                              reply_markup = ReplyKeyboardRemove())
    bot.register_next_step_handler(message, handle_word_to_delete)

def handle_word_to_delete(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    word_to_delete = message.text.lower()
    try:
        ru_word = session.query(RussianWord).filter(RussianWord.ru_word ==
                                                    word_to_delete).first()
        en_word = session.query(EnglishWord).filter(EnglishWord.en_word ==
                                                    word_to_delete).first()
        if ru_word:
            associations = session.query(RussianEnglishAssociation).filter_by(
                russian_word_id = ru_word.id).all()
            for items in associations:
                other_items = session.query(RussianEnglishAssociation).filter(
                    RussianEnglishAssociation.english_word_id == items.english_word_id,
                    RussianEnglishAssociation.russian_word_id != ru_word.id
                ).first()
                if not other_items:
                    en_word_to_delete = session.get(EnglishWord,
                                                    items.english_word_id)
                    if en_word_to_delete:
                        session.delete(en_word_to_delete)
                session.delete(items)
            session.delete(ru_word)
            session.commit()
            bot.send_message(chat_id,
                             f'–°–ª–æ–≤–æ - {word_to_delete} - –∏ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ '
                             f'–ø–µ—Ä–µ–≤–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è.')
        elif en_word:
            associations = session.query(RussianEnglishAssociation).filter_by(
                english_word_id = en_word.id).all()
            for items in associations:
                other_items = session.query(RussianEnglishAssociation).filter(
                    RussianEnglishAssociation.russian_word_id == items.russian_word_id,
                    RussianEnglishAssociation.english_word_id != en_word.id
                ).first()
                if not other_items:
                    ru_word_to_delete = session.get(RussianWord,
                                                    items.russian_word_id)
                    if ru_word_to_delete:
                        session.delete(ru_word_to_delete)
                session.delete(items)
            session.delete(en_word)
            session.commit()
            bot.send_message(chat_id,
                             f'–°–ª–æ–≤–æ - {word_to_delete} - –∏ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ '
                             f'–ø–µ—Ä–µ–≤–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è.')
        else:
            bot.send_message(chat_id, f'–°–ª–æ–≤–æ - {word_to_delete} - '
                                      f'–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.')
    except Exception as e:
        session.rollback()
        bot.send_message(chat_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {str(e)}')
    finally:
        bot.send_message(chat_id, text = Labels.NEXT_ACTION,
                         reply_markup = get_translation_menu())

@bot.message_handler(commands = ['reset_progress'])
def handle_reset_progress(message):
    user_name = message.from_user.id
    bot.send_message(message.chat.id,
                '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è? '
                     '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
                     reply_markup = create_confirmation_keyboard())

def reset_users_progress(user_id, session):
    try:
        user = session.query(User).filter(User.username == user_id).first()
        if not user:
            return False, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!'
        deleted = session.query(LearnedWord).filter(
            LearnedWord.user_id == user.id).delete()
        session.commit()
        return True, f'–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {deleted} –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤(–∞)!'
    except Exception as e:
        session.rollback()
        return False, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}'

@bot.message_handler(func = lambda message: message.text in [
    SessionDataSet.target_word] + SessionDataSet.other_words)
def handle_translation_choice(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    chosen_word = message.text
    if SessionDataSet.translate_direction == 'ru_en_direction':
        SessionDataSet.learned_ru_word_id = dbm.get_russian_word_id(
            session, SessionDataSet.current_word)
        SessionDataSet.learned_en_word_id = dbm.get_english_word_id(
            session, SessionDataSet.target_word)
    else:
        SessionDataSet.learned_en_word_id = dbm.get_english_word_id(
            session, SessionDataSet.current_word)
        SessionDataSet.learned_ru_word_id = dbm.get_russian_word_id(
            session, SessionDataSet.target_word)
    SessionDataSet.current_word_attempts += 1
    if chosen_word == SessionDataSet.target_word:
        if SessionDataSet.current_word_attempts == 1:
            SessionDataSet.correct_answers.append(SessionDataSet.current_word)
        phrase = random.choice(Labels.CORRECT_PHRASES)
        sticker_id = random.choice(Stickers.CORRECT_STICKERS)
        bot.send_sticker(chat_id, sticker_id)
        bot.send_message(chat_id, phrase)
        bot.send_message(message.chat.id,
                         '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ –∏–∑—É—á–µ–Ω–Ω—ã—Ö?',
                         reply_markup = create_saving_keyboard())
        SessionDataSet.current_word_attempts = 0
    else:
        phrase = random.choice(Labels.INCORRECT_PHRASES)
        sticker_id = random.choice(Stickers.INCORRECT_STICKERS)

        bot.send_message(chat_id, phrase)
        bot.send_sticker(chat_id, sticker_id)

        if SessionDataSet.translate_direction == 'ru_en_direction':
            bot.send_message(chat_id,
                         f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ '
                             f'{SessionDataSet.current_word}')
        else:
            bot.send_message(chat_id,
                             f'Try again. Translate word: '
                             f'{SessionDataSet.current_word}')

        if (SessionDataSet.current_word_attempts >= 3 or
                chosen_word == SessionDataSet.target_word):
            bot.send_message(chat_id,
                             '–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏!\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ '
                             '—Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É!')
            SessionDataSet.current_word_attempts = 0
            handle_next_word(message)

@bot.message_handler(func = lambda message:
                     message.text == Command.NEXT_WORD)
def handle_next_word(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    word_list = dbm.get_word_for_study(
        SessionDataSet.dict_type,
        SessionDataSet.translate_direction,
        user_id,
        session
    )
    if len([word for word in word_list if word]) < 5:
        bot.send_message(chat_id,
                         '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                         '–¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.')
        return
    new_words = [word for word in word_list if
                 word not in SessionDataSet.used_words]
    if not new_words:
        SessionDataSet.used_words = []
        new_words = word_list

    (SessionDataSet.current_word, SessionDataSet.target_word,
     *SessionDataSet.other_words) = new_words
    SessionDataSet.used_words.append(SessionDataSet.current_word)

    is_en_ru = SessionDataSet.translate_direction == 'en_ru_direction'
    header_text = (f'{'Translate word:' if is_en_ru else '–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ'}:\n'
                   f'üëâ{SessionDataSet.current_word}üëà')
    task_text = f'{'Choose a translation option' if is_en_ru else 
                 '–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞'}:'

    bot.send_message(chat_id = chat_id, text = header_text)
    bot.send_message(chat_id = chat_id, text = task_text,
                     reply_markup=get_translation_menu())

@bot.message_handler(func = lambda message: message.text == Command.END)
def handle_end_lesson(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    total_words = len(SessionDataSet.used_words)
    correct_answers = sum(1 for word in SessionDataSet.used_words if word in
                          SessionDataSet.correct_answers)
    accuracy = (correct_answers / total_words) * 100 if total_words > 0 else 0
    result_text = (
        f'–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n'
        f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ä–æ–∫–∞:\n'
        f'üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: {total_words}\n'
        f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers}\n'
        f'üéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞: {accuracy:.2f}%\n\n'
        f'–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫?'
    )
    markup = types.InlineKeyboardMarkup(row_width = 2)
    new_lesson_btn = types.InlineKeyboardButton('–ù–æ–≤—ã–π —É—Ä–æ–∫',
                                                callback_data = 'new_lesson')
    exit_btn = types.InlineKeyboardButton('–ü–æ–∫–∞! üëã',
                                               callback_data = 'exit')

    markup.add(new_lesson_btn, exit_btn)
    bot.send_message(chat_id, result_text, reply_markup =
                     ReplyKeyboardRemove())
    bot.send_message(chat_id, Labels.NEXT_ACTION, reply_markup = markup)

    SessionDataSet.used_words.clear()
    SessionDataSet.correct_answers.clear()
    SessionDataSet.current_word = ''
    SessionDataSet.target_word = ''
    SessionDataSet.other_words.clear()

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        'ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:\n\n'
        '1Ô∏è‚É£ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:\n'
        '   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n'
        '   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ (EN ‚û°Ô∏è RU –∏–ª–∏ RU ‚û°Ô∏è EN)\n'
        '   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n‚Ä¢ \'–í—Å–µ —Å–ª–æ–≤–∞ üìö\' - –æ–±—â–∏–π '
        '—Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞\ ‚Ä¢ \'–ú–æ–∏ —Å–ª–æ–≤–∞ üìñ\' - —Å–ª–æ–≤–∞—Ä—å '
        '—Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
        '2Ô∏è‚É£ –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤:\n'
        '   ‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n'
        '   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n'
        '   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \'–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚è©\' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ '
        '—Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É\n\n'
        '3Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–º:\n'
        '   ‚Ä¢ \'–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï\':  –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—ã —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å\n'
        '   ‚Ä¢ \'–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ûñ\':  —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è\n\n'
        '4Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞:\n'
        '   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ \'–ó–∞–∫–æ–Ω—á–∏—Ç—å —É—Ä–æ–∫ ‚ùå\' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ '
        '–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º\n\n'
        '5Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '   ‚Ä¢ /reset_progress - —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è\n‚ÄºÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! '
        '–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è!!\n\n'
        '–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞! üåü'
    )
    bot.send_message(message.chat.id, help_text)

# @bot.message_handler(func = lambda message: True, content_types = ['text'])
# def handle_all_messages(message):
#     user_id = message.from_user.id
#     chat_id = message.chat.id
#     current_state = bot.get_state(user_id, chat_id)
#     logger.info(f"Received message: '{message.text}', Current state: {current_state}")

# if __name__ == '__main__':
#     bot.polling(none_stop=True)